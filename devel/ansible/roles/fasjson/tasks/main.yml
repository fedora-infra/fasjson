---
- name: Install RPM packages
  dnf:
    name:
      - httpd
      - mod_auth_gssapi
      - mod_session
      - mod_ssl
      - python3-mod_wsgi
      - python3-dns
      - python3-flask
      - python3-gssapi
      - python3-ldap
      - python3-pip
      - python3-wheel
      - python3-devel
      - openldap-devel
      - krb5-devel
      - poetry
      - python3-tox
      - "@Development Tools"
      - vim
      - tmux
      - libffi-devel
      - openldap-devel
    state: present

- name: Allow apache to see /srv
  sefcontext:
    target: "/srv(/.*)?"
    setype: httpd_sys_content_t

- name: Allow apache to exec binary Python modules
  sefcontext:
    target: '/srv/venv/lib(64)?/.*\.so[0-9.]*'
    setype: httpd_sys_script_exec_t

- name: Allow apache to access the source code dir
  file:
    name: /home/vagrant
    mode: 0755

- name: Create a directory for the virtualenv where Apache can see it
  file:
    name: /srv/venv
    state: directory
    mode: 0755
    owner: vagrant
    group: vagrant

# - name: Create the virtualenv and install poetry
#   pip:
#     #name: poetry
#     virtualenv: /srv/venv
#   become: yes
#   become_user: vagrant

- name: Create the virtualenv
  command: python -m venv /srv/venv
  become: yes
  become_user: vagrant

# - name: Tell poetry not to create a virtualenv
#   shell: /srv/venv/bin/poetry config virtualenvs.create false
#   args:
#     chdir: /home/vagrant/fasjson/
#   become: yes
#   become_user: vagrant

# https://github.com/python-ldap/python-ldap/issues/432#issuecomment-974799221
- name: Workaround for python-ldap and openldap 2.5+
  copy:
    dest: /usr/lib64/libldap_r.so
    content: INPUT ( libldap.so )

- name: Install python dependencies with poetry
  shell: poetry install
  args:
    chdir: /home/vagrant/fasjson/
  environment:
    VIRTUAL_ENV: /srv/venv
  become: yes
  become_user: vagrant

- name: Restore SELinux contexts
  command: restorecon -irv /srv/

- name: Install the .bashrc
  copy:
    src: bashrc
    dest: /home/vagrant/.bashrc
    mode: 0644
    owner: vagrant
    group: vagrant

- name: Copy wsgi
  copy:
    src: fasjson.wsgi
    dest: /srv/fasjson.wsgi
    mode: 0644
    owner: vagrant
    group: vagrant

- name: Copy the service setup script
  template:
    src: setup-fasjson-service.sh
    dest: /srv/setup-fasjson-service.sh
    mode: 0755

- name: kinit
  shell: echo "{{ ipa_admin_password }}" | kinit {{ ipa_admin_user }}@{{ krb_realm }}

- name: Create the service in IPA
  command: bash /srv/setup-fasjson-service.sh

- name: Configure temporary files
  copy:
    src: tmpfiles.conf
    dest: /etc/tmpfiles.d/fasjson.conf

- name: Create temporary file
  shell: systemd-tmpfiles --create

- name: Tune SELinux Policy
  seboolean:
    name: "{{ item }}"
    state: yes
    persistent: yes
  with_items:
    - httpd_can_connect_ldap
    - httpd_can_network_connect
    - httpd_use_fusefs
    - httpd_read_user_content

- name: Create Apache service
  file:
    path: /etc/systemd/system/httpd.service.d
    state: directory
    mode: 0755

- name: Copy configs for Apache
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - src: "systemd-service.conf"
      dest: "/etc/systemd/system/httpd.service.d/fasjson.conf"

- name: Copy templated configs for Apache
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - src: "httpd.conf"
      dest: "/etc/httpd/conf.d/fasjson.conf"

- name: Enable and restart Apache
  systemd:
    state: restarted
    name: httpd
    enabled: yes
    daemon_reload: yes
